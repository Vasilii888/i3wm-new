# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
 glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = false;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;


#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
corner-radius = 10;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
   "window_type = 'dock'",
   "window_type = 'desktop'",
	"class_g = 'xfce4-notifyd'",
	"class_g = 'xfce4-panel'"
 ];

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
shadow = true;

shadow-radius = 8;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.75
 # The left offset for shadows, in pixels. (defaults to -15)
# shadow-offset-x = -15
shadow-offset-x = -7;

# The top offset for shadows, in pixels. (defaults to -15)
# shadow-offset-y = -15
shadow-offset-y = -7;

shadow-exclude = [
"class_g = 'firefox' && argb",
"name = 'Notification'",
"name = 'xfce4-notifyd'",
 "name *= 'picom'",
"class_g = 'lutris'",
"class_g = 'kdenlive'",
"class_g = 'i3lock'",
"class_g = 'Blander'",
"class_g = 'Chromium'",
"class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"

];

#################################
#
# Opacity
#
#################################

#inactive-opacity = 1;
#active-opacity = 1;
#frame-opacity = 1;

opacity-rule = [ 
	"100:class_g = 'firefox' && focused",
	"100:class_g = 'firefox' && !focused",
	"100:class_g = 'Chromium' && focused",
	"100:class_g = 'Chromium' && !focused",
  	"97:class_g = 'Rofi'",
   	"97:class_g = 'xfce4-notifyd'",
	"100:window_type = 'normal' && focused",		
	"97:window_type = 'normal' && !focused",
	"100:window_type = 'dialog'",		
	"100:window_type = 'popup_menu'",	
	"100:window_type = 'notification'",	
	"100:class_g = 'gimp' && focused",
	"100:class_g = 'gimp' && !focused",
	"100:class_g = 'Kdenlive' && focused",
	"100:class_g = 'Kdenlive' && !focused",
	"100:class_g = 'Blander' && focused",
	"100:class_g = 'Blander' && !focused",
	"100:class_g = 'i3lock'",
	 "100:class_g = 'xfce4-panel'"
];

inactive-opacity-override = false;
#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = true;

fade-in-step = 0.03;
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 3

# Specify a list of conditions of windows that should not be faded.
 fade-exclude = ["class_g = 'lutris'"]

#################################
#
# Blur
#
#################################
blur: {
  
  method = "dual_kawase";
  strength = 4;
  deviation = 1.0;
  background = false;
  background-frame = false;
  background-fixed = false;
}

blur-background-exclude = [
"class_g = 'i3lock'",
"class_g = 'Kdenlive'",
"class_g = 'Blander'",
"window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c"

]


#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 60;

# Vertical synchronization: match the refresh rate of the monitor
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = true;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = true;
        # opacity: Default opacity for the type of windows.
        opacity = 0.9;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
	dock = { shadow = true; fade = true;opacity = 0.9; }
  #dnd = { shadow = false; }
 # popup_menu = { opacity = 0.9; }
 # dropdown_menu = { opacity = 0.9; }

};

######################
#
# XSync
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;
